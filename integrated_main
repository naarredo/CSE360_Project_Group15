

/* Creator: Group 15
 * Publish Date: March 20, 2024 */

package application;
	
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label; 
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextArea;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.io.*;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

import javafx.geometry.*;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;



import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextArea;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.scene.control.TextField;

public class CSE360_Main extends Application {
    public static void main(String[] args) {
        launch(args);
    }
    
	private static final String BASE_DIRECTORY = System.getProperty("user.home") + File.separator + "PatientPortalData";
    
    private int userType;
    private String userName;
    private String password;
    protected Stage primaryStage;
    HBox mainPane = new HBox();
	VBox loginBox = new VBox(8), centerBox = new VBox(20);
	protected Button logout = new Button();
	TextArea textArea1 = new TextArea(), textArea2 = new TextArea();
	PasswordField pField = new PasswordField();
	Label invalidPass = new Label("Invalid Password");
    
    public void start(Stage primaryStage) {
    	this.primaryStage = primaryStage;
    	primaryStage.setTitle("Some Health Site");
    	logout.setText("Logout");
    	buildLogin(); 
    	
    	logout.setOnAction(new EventHandler<>() {
    		public void handle(ActionEvent event) {
    			mainPane.getChildren().clear();
    			centerBox.getChildren().clear();
    			loginBox.getChildren().clear();

    			buildLogin();
    		}
    	});

    	/*opens the scene in a JavaFX window */
    	primaryStage.setScene(new Scene(mainPane,500,250));
    	primaryStage.show();    	
    }
    
    public void buildLogin() {
    	Button choosePatient = new Button(), chooseDoctor = new Button(), chooseNurse = new Button(), login = new Button();
    	Label header = new Label("Welcome To _____"), subheader = new Label("Please choose what you would like to login in as:");
    	Label label1 = new Label("User ID:"), label2 = new Label("Password:");
    	Label label3 = new Label("Doctor Password:"), label4 = new Label("Nurse Password:"); 
    	
    	userType = 0; 
    	
    	choosePatient.setText("Patient");
    	chooseDoctor.setText("Doctor");
    	chooseNurse.setText("Nurse");
    	login.setText("Login");
    	
    	//set up of text box
    	textArea1.setPrefWidth(160);
    	textArea1.setPrefHeight(5);
    	textArea2.setPrefWidth(160);
    	textArea2.setPrefHeight(5);
    	
    	/*set up of the main panel, including the locations and spaces
    	 *  between the previously made panels */
    	header.setFont(new Font("Arial", 20));
    	
    	loginBox.setAlignment(Pos.CENTER);
    	loginBox.getChildren().add(choosePatient);
    	loginBox.getChildren().add(chooseDoctor);
    	loginBox.getChildren().add(chooseNurse);
    	
    	centerBox.setAlignment(Pos.CENTER);
    	centerBox.getChildren().add(header);
    	centerBox.getChildren().add(subheader);
    	centerBox.getChildren().add(loginBox);
    	
    	mainPane.setAlignment(Pos.CENTER);
    	mainPane.getChildren().add(centerBox);
    	
    	choosePatient.setOnAction(event -> new patientUser(primaryStage));

    	chooseDoctor.setOnAction(new EventHandler<>() {
    		public void handle(ActionEvent event) {
    			userType = 2; 
    			centerBox.getChildren().clear();
    			loginBox.getChildren().clear();
    			
    			loginBox.setAlignment(Pos.CENTER_LEFT);
    			loginBox.getChildren().add(label3);
    			loginBox.getChildren().add(pField);
    			
    			centerBox.getChildren().add(loginBox);
    			centerBox.getChildren().add(login);
    		}
    	});
    	
    	chooseNurse.setOnAction(new EventHandler<>() {
    		public void handle(ActionEvent event) {
    			userType = 3; 
    			centerBox.getChildren().clear();
    			loginBox.getChildren().clear();
    			
    			loginBox.setAlignment(Pos.CENTER_LEFT);
    			loginBox.getChildren().add(label4);
    			loginBox.getChildren().add(pField);
    			
    			centerBox.getChildren().add(loginBox);
    			centerBox.getChildren().add(login);
    		}
    	});
    	
    	login.setOnAction(new EventHandler<>() {
    		public void handle(ActionEvent event) {
    			userName = textArea1.getText();
    			System.out.print(userType);
    			switch(userType) {
    			case 1:
    				//patientPassCheck();
  
    				
    				//break;
    			case 2:
    				if(loginBox.getChildren().contains(invalidPass)) { 
    					loginBox.getChildren().remove(invalidPass);
    				}
    				
    				doctorPassCheck(); 
    				break;
    				
    			case 3: 
    				if(loginBox.getChildren().contains(invalidPass)) {
    					loginBox.getChildren().remove(invalidPass);
    				}
    				
    				nursePassCheck(); 
    				break;
    			}
    		}
    	});
    }
    
  //  private void patientPassCheck() {
    // new patientUser(primaryStage);
   // }
    
    private void doctorPassCheck() {
    	invalidPass.setTextFill(Color.RED);
    	password = pField.getText();
    	
    	if(password.equals("password")) {
    		new DoctorView(primaryStage);
    	} else { 
    		loginBox.getChildren().add(invalidPass);
    		pField.clear();
    	}
    }

    private void nursePassCheck() {
    	invalidPass.setTextFill(Color.RED);
    	password = pField.getText();
    	
    	if (password.equals("password")) {
    		new NurseView(primaryStage);
    	} else {
    		loginBox.getChildren().add(invalidPass);
    		pField.clear();
    	}		
    }
    
    


/* Class: The Doctor GUI and functions
 * 
 * Author: Devesh Mohanta
 * 
 * Creation: 04/08/2024
 * 
 * Last Revised: 04/09/2024
 * 
 * Version: 1.11 */

public class DoctorView extends CSE360_Main {
    private VBox centerBox = new VBox(20);
    private Button logout = new Button("Logout");

    public DoctorView(Stage primaryStage) {
        super();
        this.primaryStage = primaryStage;

        buildDoctorView();
    }
    
    /* This is the actual doctor home page. To login, type in the password "doctorPassword" to enter the doctor view.
	 * It will show buttons for View Records, Send Message, and Enter Exam Info.
	 * Logout is within the entire class itself. */
	private void buildDoctorView() {
	    // Check for null before accessing primaryStage
	    if (this.primaryStage == null) {
	        throw new IllegalStateException("Primary stage has not been initialized."); //Debug statement
	    }
	    Label welcomeLabel = new Label("Welcome Doctor!");
	
	    Button viewRecordsBtn = new Button("View Records");
	    Button sendMessageBtn = new Button("Send Message");
	    Button enterExamInfoBtn = new Button("Enter Exam Info");
	
	    sendMessageBtn.setOnAction(event -> sendMessage());
	    viewRecordsBtn.setOnAction(event -> promptForPatientIDForViewingRecords());
	    enterExamInfoBtn.setOnAction(event -> promptForPatientIDForExam());
	    logout.setOnAction(event -> logout());
	
	    centerBox.getChildren().clear();
	    centerBox.getChildren().addAll(welcomeLabel, viewRecordsBtn, sendMessageBtn, enterExamInfoBtn, logout); //Adds all the buttons on the home page
	    centerBox.setAlignment(Pos.CENTER);
	
	    if (primaryStage.getScene() == null) { //In case the doctor page has never been initialized, this will show up
	        Scene scene = new Scene(centerBox, 500, 250);
	        primaryStage.setScene(scene);
	    } else { //If the doctor is still logged in, it should stay to the previous instance of the doctorHome.
	        primaryStage.getScene().setRoot(centerBox);
	    }
	
	    primaryStage.show();
	}

	//Prompts for patientID so that the doctor does not go to a blank page when trying to enter exam
    private void promptForPatientIDForExam() {
        // Input dialog for patient ID
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("Patient ID");
        dialog.setHeaderText("Enter the Patient ID");

        // Process the response
        Optional<String> result = dialog.showAndWait();
        result.ifPresent(patientID -> {
            if (!patientID.isEmpty() && checkPatientId(patientID)) { //Leads to the patient Exam page
                enterExamInfo(patientID);
            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION, "Invalid or non-existent Patient ID.");
                alert.showAndWait();
            }
        });
    }
    
  //Prompts for patientID so that the doctor does not go to a blank page when trying to enter the patient records
    private void promptForPatientIDForViewingRecords() {
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("Patient ID");
        dialog.setHeaderText("Enter the Patient ID");

        Optional<String> result = dialog.showAndWait();
        result.ifPresent(patientID -> {
            if (!patientID.isEmpty() && checkPatientId(patientID)) {
                viewRecords(patientID);
            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION, "Invalid or non-existent Patient ID.");
                alert.showAndWait();
            }
        });
    }
    
    //Through a menu button on either the view record, message, or enter exam windows, this will lead the user back to doctorHome.
    private void backToDoctorHome() {
    	buildDoctorView();
    }

    private void viewRecords(String patientID) {
        centerBox.getChildren().clear();

        // Check if patientID is valid, should be covered by method
        if (patientID.isEmpty() || !checkPatientId(patientID)) {
            Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid Patient ID.");
            alert.showAndWait();
            return;
        }

        // Now that we have a valid patient ID, proceed to display the patient records
        displayPatientRecords(patientID, false);
    }

    //Method to handle checking patientIDs in the system
    private boolean checkPatientId(String patientID) {
        System.out.println("Checking patient ID: " + patientID); // Debug output

        // The directory name is the patient ID itself
        File patientFolder = new File(patientID);

        // Check if the directory exists and is indeed a directory
        if (!patientFolder.exists()) {
            System.out.println("Patient folder does not exist."); // Debug output
            return false;
        }
        if (!patientFolder.isDirectory()) {
            System.out.println("Patient folder path is not a directory."); // Debug output
            return false;
        }

        // Now check for the specific patient info file within this directory
        File patientInfoFile = new File(patientFolder, patientID + "_patientInfo.txt");
        if (!patientInfoFile.exists()) {
            System.out.println("Patient info file does not exist."); // Debug output
            return false;
        }

        return true;
    }

    //Displays the patient records window. It sets all of the labels, text areas, etc. into a NON-EDITABLE page.
    private void displayPatientRecords(String patientID, boolean isEditable) {
        centerBox.getChildren().clear();

        // GridPane for form layout
        GridPane formGrid = new GridPane();
        formGrid.setAlignment(Pos.CENTER);
        formGrid.setHgap(10); // Horizontal gap between columns
        formGrid.setVgap(10); // Vertical gap between rows

        // Column 1 - Labels
        Label heightLabel = new Label("Height:");
        Label weightLabel = new Label("Weight:");
        Label bodyTempLabel = new Label("Body Temp:");
        Label bloodPressureLabel = new Label("Blood Pressure:");
        Label allergiesLabel = new Label("Allergies:");
        Label healthConcernsLabel = new Label("Health Concerns:");
        Label prescriptionsLabel = new Label("Prescriptions:");

        // Column 2 - Textfields
        TextField heightField = new TextField();
        TextField weightField = new TextField();
        TextField bodyTempField = new TextField();
        TextField bloodPressureField = new TextField();
        TextField allergiesField = new TextField();
        TextField healthConcernsField = new TextField();
        TextField prescriptionsField = new TextField();

        // Set text fields to be editable based on the isEditable parameter
        heightField.setEditable(isEditable);
        weightField.setEditable(isEditable);
        bodyTempField.setEditable(isEditable);
        bloodPressureField.setEditable(isEditable);
        allergiesField.setEditable(isEditable);
        healthConcernsField.setEditable(isEditable);
        prescriptionsField.setEditable(isEditable);

        // Add labels and text fields to the grid
        formGrid.add(heightLabel, 0, 0);
        formGrid.add(heightField, 1, 0);
        formGrid.add(weightLabel, 0, 1);
        formGrid.add(weightField, 1, 1);
        formGrid.add(bodyTempLabel, 0, 2);
        formGrid.add(bodyTempField, 1, 2);
        formGrid.add(bloodPressureLabel, 0, 3);
        formGrid.add(bloodPressureField, 1, 3);
        formGrid.add(allergiesLabel, 0, 4);
        formGrid.add(allergiesField, 1, 4);
        formGrid.add(healthConcernsLabel, 0, 5);
        formGrid.add(healthConcernsField, 1, 5);
        formGrid.add(prescriptionsLabel, 0, 6);
        formGrid.add(prescriptionsField, 1, 6);

        // Set column constraints to align labels to the right (end of the cell)
        ColumnConstraints column1 = new ColumnConstraints();
        column1.setHalignment(HPos.RIGHT);
        ColumnConstraints column2 = new ColumnConstraints();
        column2.setHgrow(Priority.ALWAYS); // Allow text fields to grow
        formGrid.getColumnConstraints().addAll(column1, column2);

        // Add the form grid to the center box
        centerBox.getChildren().add(formGrid);


        // Column 3 - Doctor Recommendations text area
        VBox recommendationsAndRecordsColumn = new VBox(10);
        Label recommendationsLabel = new Label("Doctor Recommendations");
        TextArea recommendationsArea = new TextArea();
        recommendationsArea.setPrefWidth(200); //Set preferred width for text area
        recommendationsArea.setPrefHeight(300); // Set preferred height for the text area
        recommendationsArea.setEditable(isEditable);
        recommendationsAndRecordsColumn.getChildren().addAll(recommendationsLabel, recommendationsArea);

     // Column 4 - File Selector, select a file on the right and then press the View Visit button in order for the file's contents to show up on the page
        VBox medicalRecordsColumn = new VBox(10);
        medicalRecordsColumn.setAlignment(Pos.CENTER);
        ListView<String> medicalRecordsListView = new ListView<>();
        medicalRecordsListView.setPrefHeight(200); // Set preferred height for the list view
        File patientFolder = new File(patientID + "/PatientVisits");

        // Update the regex to match the new file naming convention: patientID_yy.MM.dd.txt
        String regexPattern = patientID + "_\\d{2}\\.\\d{2}\\.\\d{2}\\.txt";
        String[] medicalRecordFiles = patientFolder.list((dir, name) -> name.matches(regexPattern));
        if (medicalRecordFiles != null) {
            medicalRecordsListView.getItems().addAll(medicalRecordFiles);
        }
        medicalRecordsColumn.getChildren().addAll(medicalRecordsListView);

        // Buttons for View Visit and Go Back
        Button viewVisitButton = new Button("View Visit");
        Button goBackButton = new Button("Go Back");
        if (isEditable) {
            Button saveExamInfoButton = new Button("Save Exam Info");
            saveExamInfoButton.setOnAction(event -> saveExamInfo(patientID, heightField, weightField, bodyTempField, bloodPressureField, allergiesField, healthConcernsField, prescriptionsField, recommendationsArea));
            centerBox.getChildren().add(saveExamInfoButton);
        }

        // Set the action for the "View Visit" button, this will show the contents of the patient record's file.
        viewVisitButton.setOnAction(event -> {
            String selectedRecord = medicalRecordsListView.getSelectionModel().getSelectedItem();
            if (selectedRecord != null && !selectedRecord.isEmpty()) {
                File selectedFile = new File(patientFolder, selectedRecord);
                parseAndDisplayPatientRecord(selectedFile, heightField, weightField, bodyTempField, bloodPressureField, allergiesField, healthConcernsField, prescriptionsField, recommendationsArea);
            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION, "Please select a record to view.");
                alert.showAndWait();
            }
        });

        goBackButton.setOnAction(event -> backToDoctorHome());

        // Layout for buttons
        HBox buttonsBox = new HBox(10, viewVisitButton, goBackButton);
        buttonsBox.setAlignment(Pos.CENTER);

        // Main layout - Horizontal Box
        HBox mainContent = new HBox(20, formGrid, recommendationsAndRecordsColumn, medicalRecordsColumn);
        mainContent.setAlignment(Pos.CENTER);

        // Add all components to the centerBox
        centerBox.getChildren().addAll(mainContent, buttonsBox);
    }

    /*This handles the parsing of the file for the patient records.
     * Format is like this, and then this method parses the information into the records or exam page
     * Date: 04/09/2024
     * Height: 5'11
     * Weight: 150
     * Body Temp: 400
     * Blood Pressure: 30
     * Allergies: shrimp, rice
     * Health Concerns: N/A
     * Prescriptions: Advil
     * Doctor recommendations: 
     * 
     * - Take 2 more doses of Advil */
    
    private void parseAndDisplayPatientRecord(File recordFile, TextField heightField, TextField weightField, TextField bodyTempField, TextField bloodPressureField, TextField allergiesField, TextField healthConcernsField, TextField prescriptionsField, TextArea recommendationsArea) {
        try (Scanner scanner = new Scanner(recordFile)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] keyValue = line.split(":", 2);
                if (keyValue.length == 2) {
                    String key = keyValue[0].trim();
                    String value = keyValue[1].trim();
                    switch (key) {
                        case "Height":
                            heightField.setText(value);
                            break;
                        case "Weight":
                            weightField.setText(value);
                            break;
                        case "Body Temp":
                            bodyTempField.setText(value);
                            break;
                        case "Blood Pressure":
                            bloodPressureField.setText(value);
                            break;
                        case "Allergies":
                            allergiesField.setText(value);
                            break;
                        case "Health Concerns":
                            healthConcernsField.setText(value);
                            break;
                        case "Prescriptions":
                            prescriptionsField.setText(value);
                            break;
                        case "Doctor recommendations":
                            StringBuilder recommendations = new StringBuilder();
                            recommendations.append(value); // First line of recommendations
                            while (scanner.hasNextLine()) {
                                String recommendationLine = scanner.nextLine().trim(); // Trim each line
                                if (!recommendationLine.isEmpty()) {
                                    recommendations.append("\n").append(recommendationLine);
                                }
                            }
                            recommendationsArea.setText(recommendations.toString());
                            break;
                    }
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    
    //placeholder until the messaging class is in place (this will redirect to a messaging view)
    private void sendMessage() {
        // Placeholder implementation
        System.out.println("sendMessage functionality will be implemented by another team member.");
        
        // You might still want to clear the centerBox or display a placeholder message
        centerBox.getChildren().clear();
        
        Label placeholderLabel = new Label("Messaging feature coming soon.");
        centerBox.getChildren().add(placeholderLabel);
        
        // Optionally, you can provide a button to go back to the doctor home
        Button homeButton = new Button("Home");
        homeButton.setOnAction(event -> backToDoctorHome());
        centerBox.getChildren().add(homeButton);
        
    }

    //This allows the user to enter exam info (so editing the patient Records page and saving it
    private void enterExamInfo(String patientID) {
        centerBox.getChildren().clear();

        // Check if patientID is valid (it should be, as it's already been verified)
        if (patientID.isEmpty() || !checkPatientId(patientID)) {
            Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid Patient ID.");
            alert.showAndWait();
            return;
        }

        // Now that we have a valid patient ID, proceed to enter new exam info
        // The `true` parameter will make the fields editable
        displayPatientRecords(patientID, true);
    }

    //The user can save the patient Records with any changes, and it will create a text file with the format patientID_MedicalRecords_NUMBER.txt where NUMBER increments by 1
    private void saveExamInfo(String patientID, TextField heightField, TextField weightField, TextField bodyTempField, TextField bloodPressureField, TextField allergiesField, TextField healthConcernsField, TextField prescriptionsField, TextArea recommendationsArea) {
        // Date format for inside the file - MM/dd/yyyy
        String todayDateForFile = LocalDate.now().format(DateTimeFormatter.ofPattern("MM/dd/yyyy"));
        // Date format for the filename - yy.MM.dd
        String todayDateForFilename = LocalDate.now().format(DateTimeFormatter.ofPattern("yy.MM.dd"));
    	// Gather the data from the fields
        String height = heightField.getText();
        String weight = weightField.getText();
        String bodyTemp = bodyTempField.getText();
        String bloodPressure = bloodPressureField.getText();
        String allergies = allergiesField.getText();
        String healthConcerns = healthConcernsField.getText();
        String prescriptions = prescriptionsField.getText();
        String doctorRecommendations = recommendationsArea.getText();

        // Directory path for saving the exam information
        String directoryPath = patientID + "/PatientVisits";
        File patientDirectory = new File(directoryPath);
        if (!patientDirectory.exists()) {
            patientDirectory.mkdirs(); // Create the directory if it doesn't exist
        }

        // Filename using the new date format
        String filename = directoryPath + "/" + patientID + "_" + todayDateForFilename + ".txt";

        // Writing the data to the file
        try (PrintWriter writer = new PrintWriter(filename, "UTF-8")) {
            writer.println("Date: " + todayDateForFile);
            writer.println("Height: " + height);
            writer.println("Weight: " + weight);
            writer.println("Body Temp: " + bodyTemp);
            writer.println("Blood Pressure: " + bloodPressure);
            writer.println("Allergies: " + allergies);
            writer.println("Health Concerns: " + healthConcerns);
            writer.println("Prescriptions: " + prescriptions);
            writer.println("Doctor recommendations:");
            writer.println(doctorRecommendations);

            // Display confirmation alert and refresh the patient records
            Alert confirmation = new Alert(Alert.AlertType.INFORMATION, "Exam information saved successfully.");
            confirmation.showAndWait();

            // Recall displayPatientRecords to refresh the file selector
            displayPatientRecords(patientID, true);
        } catch (IOException e) {
            e.printStackTrace();
            // Display error alert
            Alert error = new Alert(Alert.AlertType.ERROR, "Failed to save exam information.");
            error.showAndWait();
        }
    }

    // Logs out of the doctor view, back into the home page.
    private void logout() {
        // Clear any existing content in the main pane
        mainPane.getChildren().clear();
        centerBox.getChildren().clear();
        loginBox.getChildren().clear();

        // Build the login view again using the method from CSE360_Main
        // Since DoctorView extends CSE360_Main, it has access to its methods
        buildLogin();

        // Set the primary scene back to the main pane which now has the login view
        primaryStage.setScene(new Scene(mainPane, 500, 250));
        primaryStage.show();
    }
}




public class NurseView extends CSE360_Main {
	//private String userName;
	private BorderPane nursePane = new BorderPane();
	private BorderPane recordsPane = new BorderPane();
	private BorderPane vitalsPane = new BorderPane();
	private BorderPane preVitalPane = new BorderPane();
	private BorderPane additionalPane = new BorderPane();
	private BorderPane preMessagePane = new BorderPane(); 
	private VBox centerBox = new VBox(20);
	
	private Scene nurseMain = new Scene(nursePane,500,250);
	private Scene preVital = new Scene(preVitalPane,500,250);
	private Scene records = new Scene(recordsPane,500,275);
	private Scene vitals = new Scene(vitalsPane,500,250);
	private Scene additionalInfo = new Scene(additionalPane,500,250);
	private Scene preMessage = new Scene(preMessagePane, 500, 250);

	private String firstName;
	private String lastName;
	private String dateOfB;
	private String weight;
	private String height;
	private String bodyTemp;
	private String bPressure;
	private String knownAllergies;
	private String healthConcerns;
	private String prescribedMed;
	private String immunizationRecord;
	private String patientID;

    File messageFile; 

	public NurseView(Stage primaryStage) {
		super();
		//this.userName = userName;
		this.primaryStage = primaryStage;
		nurseMainPage();
	}

	private void nurseMainPage() {
		
		primaryStage.setScene(nurseMain);
		vitalsPrePage();
		vitalsPage();
		additionalPage();
		recordsPane.setCenter(centerBox);
		//messagePrePage(); 
		
		Button viewRecords = new Button("View Records");
		Button enterVitals = new Button("Enter Vitals");
		Button messagePortal = new Button("Messages");
		Button logoutButton = new Button("Logout");

		
		HBox mainHolder = new HBox();

		VBox recordsVitalsHolder = new VBox();	
		VBox headLabels = new VBox();
		VBox msgLogHolder = new VBox();
		VBox leftHolder = new VBox();
		
		Label welcome = new Label("Welcome, Nurse");
		Label optionSelect = new Label("Please select an option:");
		
		if(this.primaryStage == null)
			throw new IllegalStateException("Primary Stage has not been initiated");
		
		logoutButton.setPrefSize(70, 20);
		messagePortal.setPrefSize(70, 20);
		viewRecords.setPrefSize(90,20);
		enterVitals.setPrefSize(90,20);
		
		headLabels.getChildren().addAll(welcome,optionSelect);
		msgLogHolder.getChildren().addAll(messagePortal, logoutButton);
		recordsVitalsHolder.getChildren().addAll(viewRecords,enterVitals);
		leftHolder.getChildren().addAll(headLabels,recordsVitalsHolder);
		msgLogHolder.setSpacing(5);
		headLabels.setSpacing(10);
		recordsVitalsHolder.setSpacing(20);
		leftHolder.setSpacing(30);
		headLabels.setAlignment(Pos.CENTER);
		recordsVitalsHolder.setAlignment(Pos.CENTER);
		msgLogHolder.setAlignment(Pos.TOP_RIGHT);
		
		mainHolder.setAlignment(Pos.CENTER);
		mainHolder.setSpacing(25);
		mainHolder.getChildren().addAll(leftHolder,msgLogHolder);
		mainHolder.setPadding(new Insets(10,0,10,130));
		msgLogHolder.setPadding(new Insets(0,0,0,50));
		
		nursePane.setCenter(mainHolder);
		
	    viewRecords.setOnAction(e -> {
	        promptForPatientIDForViewingRecords();
	    });
		messagePortal.setOnAction(e -> primaryStage.setScene(preMessage));
		enterVitals.setOnAction(e -> primaryStage.setScene(preVital));
		logoutButton.setOnAction(e -> {
			buildLogin();
			primaryStage.setScene(new Scene(mainPane,500,250));
		});
        
	}

    //Method to handle checking patientIDs in the system
    private boolean checkPatientId(String patientID) {
        System.out.println("Checking patient ID: " + patientID); // Debug output

        // The directory name is the patient ID itself
        File patientFolder = new File(patientID);

        // Check if the directory exists and is indeed a directory
        if (!patientFolder.exists()) {
            System.out.println("Patient folder does not exist."); // Debug output
            return false;
        }
        if (!patientFolder.isDirectory()) {
            System.out.println("Patient folder path is not a directory."); // Debug output
            return false;
        }

        // Now check for the specific patient info file within this directory
        File patientInfoFile = new File(patientFolder, patientID + "_patientInfo.txt");
        if (!patientInfoFile.exists()) {
            System.out.println("Patient info file does not exist."); // Debug output
            return false;
        }

        return true;
    }
	
	//Prompts for patientID so that the doctor does not go to a blank page when trying to enter the patient records
    private void promptForPatientIDForViewingRecords() {
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("Patient ID Input");
        dialog.setHeaderText("Enter Patient ID");

        Optional<String> result = dialog.showAndWait();
        result.ifPresent(patientID -> {
            System.out.println("Patient ID entered: " + patientID); // Debug output
            if (!patientID.isEmpty() && checkPatientId(patientID)) {
                System.out.println("Valid Patient ID. Proceeding to display records."); // Debug output
                recordsPage(patientID); // Assuming recordsPage method handles displaying records for the given ID
                primaryStage.setScene(records); // Change to the appropriate scene
            } else {
                System.out.println("Invalid or non-existent Patient ID entered."); // Debug output
                Alert alert = new Alert(AlertType.ERROR, "Invalid or non-existent Patient ID.");
                alert.showAndWait();
            }
        });
    }

	
	private void vitalsPrePage() {
		
		Label patInfo = new Label("Patient Information:"), fName = new Label("First Name:"), lName = new Label("Last Name:"), dob = new Label("Date of Birth:");
		
		HBox infoHoldBox = new HBox(), contButtonHold = new HBox();
		
		VBox contBox = new VBox(), infoLabelBox = new VBox(),infoTextFieldBox = new VBox(); 

		Button cont = new Button("Continue");
		
		TextField nameField = new TextField(), nameField2 = new TextField(), birthField  = new TextField();
		
		infoLabelBox.getChildren().addAll(fName,lName,dob);
		infoTextFieldBox.getChildren().addAll(nameField,nameField2,birthField);
		infoHoldBox.getChildren().addAll(infoLabelBox,infoTextFieldBox);
		contButtonHold.getChildren().add(cont);
		contBox.getChildren().addAll(patInfo,infoHoldBox,contButtonHold);
		contBox.setPadding(new Insets(10,10,10,10));
		contBox.setSpacing(15);
		infoTextFieldBox.setSpacing(15);
		infoLabelBox.setSpacing(25);
		
		preVitalPane.setPadding(new Insets(10,10,10,10));
		preVitalPane.setCenter(contBox);
		
	    cont.setOnAction(e -> {
	        firstName = nameField.getText();
	        lastName = nameField2.getText();
	        dateOfB = birthField.getText();

	        if (firstName.isBlank() || lastName.isBlank() || dateOfB.isBlank()) {
	            System.out.println("Blank Values");
	        } else {
	            try {
	                DateTimeFormatter dobFormatter = DateTimeFormatter.ofPattern("MM/dd/yy");
	                LocalDate birthDate = LocalDate.parse(dateOfB, dobFormatter);
	                LocalDate currentDate = LocalDate.now();
	                int age = Period.between(birthDate, currentDate).getYears();

	                if (age < 12) {
	                    // Show alert for under-aged patient
	                    Alert alert = new Alert(AlertType.INFORMATION);
	                    alert.setTitle("Age Restriction");
	                    alert.setHeaderText(null);
	                    alert.setContentText("Patient is under 12 years old. Not eligible for vitals entry.");

	                    alert.showAndWait(); // Show the alert and wait for it to be closed

	                    primaryStage.setScene(nurseMain); // Redirect to nurse home page
	                } else {
	                    primaryStage.setScene(vitals); // Proceed to vitals page
	                }
	            } catch (DateTimeParseException ex) {
	                Alert errorAlert = new Alert(AlertType.ERROR);
	                errorAlert.setTitle("Date Format Error");
	                errorAlert.setHeaderText(null);
	                errorAlert.setContentText("Invalid date format. Please enter date of birth in MM/dd/yy format.");

	                errorAlert.showAndWait(); // Show the error alert

	                // Optionally, redirect to a different scene or take other actions
	            }
	        }
	        nameField.clear();
	        nameField2.clear();
	        birthField.clear();
	    });
	}
	
    //Displays the patient records window. It sets all of the labels, text areas, etc. into a NON-EDITABLE page.
    private void recordsPage(String patientID) {
        centerBox.getChildren().clear();

        // GridPane for form layout
        GridPane formGrid = new GridPane();
        formGrid.setAlignment(Pos.CENTER);
        formGrid.setHgap(10); // Horizontal gap between columns
        formGrid.setVgap(10); // Vertical gap between rows

        // Column 1 - Labels
        Label heightLabel = new Label("Height:");
        Label weightLabel = new Label("Weight:");
        Label bodyTempLabel = new Label("Body Temp:");
        Label bloodPressureLabel = new Label("Blood Pressure:");
        Label allergiesLabel = new Label("Allergies:");
        Label healthConcernsLabel = new Label("Health Concerns:");
        Label prescriptionsLabel = new Label("Prescriptions:");

        // Column 2 - Textfields
        TextField heightField = new TextField();
        TextField weightField = new TextField();
        TextField bodyTempField = new TextField();
        TextField bloodPressureField = new TextField();
        TextField allergiesField = new TextField();
        TextField healthConcernsField = new TextField();
        TextField prescriptionsField = new TextField();

        // Set text fields to be editable based on the isEditable parameter
        heightField.setEditable(false);
        weightField.setEditable(false);
        bodyTempField.setEditable(false);
        bloodPressureField.setEditable(false);
        allergiesField.setEditable(false);
        healthConcernsField.setEditable(false);
        prescriptionsField.setEditable(false);

        // Add labels and text fields to the grid
        formGrid.add(heightLabel, 0, 0);
        formGrid.add(heightField, 1, 0);
        formGrid.add(weightLabel, 0, 1);
        formGrid.add(weightField, 1, 1);
        formGrid.add(bodyTempLabel, 0, 2);
        formGrid.add(bodyTempField, 1, 2);
        formGrid.add(bloodPressureLabel, 0, 3);
        formGrid.add(bloodPressureField, 1, 3);
        formGrid.add(allergiesLabel, 0, 4);
        formGrid.add(allergiesField, 1, 4);
        formGrid.add(healthConcernsLabel, 0, 5);
        formGrid.add(healthConcernsField, 1, 5);
        formGrid.add(prescriptionsLabel, 0, 6);
        formGrid.add(prescriptionsField, 1, 6);

        // Set column constraints to align labels to the right (end of the cell)
        ColumnConstraints column1 = new ColumnConstraints();
        column1.setHalignment(HPos.RIGHT);
        ColumnConstraints column2 = new ColumnConstraints();
        column2.setHgrow(Priority.ALWAYS); // Allow text fields to grow
        formGrid.getColumnConstraints().addAll(column1, column2);

        // Add the form grid to the center box
        centerBox.getChildren().add(formGrid);


        // Column 3 - Doctor Recommendations text area
        VBox recommendationsAndRecordsColumn = new VBox(10);
        Label recommendationsLabel = new Label("Doctor Recommendations");
        TextArea recommendationsArea = new TextArea();
        recommendationsArea.setPrefWidth(200); //Set preferred width for text area
        recommendationsArea.setPrefHeight(300); // Set preferred height for the text area
        recommendationsArea.setEditable(false);
        recommendationsAndRecordsColumn.getChildren().addAll(recommendationsLabel, recommendationsArea);

     // Column 4 - File Selector, select a file on the right and then press the View Visit button in order for the file's contents to show up on the page
        VBox medicalRecordsColumn = new VBox(10);
        medicalRecordsColumn.setAlignment(Pos.CENTER);
        ListView<String> medicalRecordsListView = new ListView<>();
        medicalRecordsListView.setPrefHeight(200); // Set preferred height for the list view
        File patientFolder = new File(patientID + "/PatientVisits");

        // Update the regex to match the new file naming convention: patientID_yy.MM.dd.txt
        String regexPattern = patientID + "_\\d{2}\\.\\d{2}\\.\\d{2}\\.txt";
        String[] medicalRecordFiles = patientFolder.list((dir, name) -> name.matches(regexPattern));
        if (medicalRecordFiles != null) {
            medicalRecordsListView.getItems().addAll(medicalRecordFiles);
        }
        medicalRecordsColumn.getChildren().addAll(medicalRecordsListView);

        // Buttons for View Visit and Go Back
        Button viewVisitButton = new Button("View Visit");
        Button goBackButton = new Button("Go Back");

        // Set the action for the "View Visit" button, this will show the contents of the patient record's file.
        viewVisitButton.setOnAction(event -> {
            String selectedRecord = medicalRecordsListView.getSelectionModel().getSelectedItem();
            if (selectedRecord != null && !selectedRecord.isEmpty()) {
                File selectedFile = new File(patientFolder, selectedRecord);
                parseAndDisplayPatientRecord(selectedFile, heightField, weightField, bodyTempField, bloodPressureField, allergiesField, healthConcernsField, prescriptionsField, recommendationsArea);
            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION, "Please select a record to view.");
                alert.showAndWait();
            }
        });

        goBackButton.setOnAction(event -> primaryStage.setScene(nurseMain));

        // Layout for buttons
        HBox buttonsBox = new HBox(10, viewVisitButton, goBackButton);
        buttonsBox.setAlignment(Pos.CENTER);

        // Main layout - Horizontal Box
        HBox mainContent = new HBox(20, formGrid, recommendationsAndRecordsColumn, medicalRecordsColumn);
        mainContent.setAlignment(Pos.CENTER);

        // Add all components to the centerBox
        centerBox.getChildren().addAll(mainContent, buttonsBox);
    }
	
    /*This handles the parsing of the file for the patient records.
     * Format is like this, and then this method parses the information into the records or exam page
     * Date: 04/09/2024
     * Height: 5'11
     * Weight: 150
     * Body Temp: 400
     * Blood Pressure: 30
     * Allergies: shrimp, rice
     * Health Concerns: N/A
     * Prescriptions: Advil
     * Doctor recommendations: 
     * 
     * - Take 2 more doses of Advil */
    
    private void parseAndDisplayPatientRecord(File recordFile, TextField heightField, TextField weightField, TextField bodyTempField, TextField bloodPressureField, TextField allergiesField, TextField healthConcernsField, TextField prescriptionsField, TextArea recommendationsArea) {
        try (Scanner scanner = new Scanner(recordFile)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] keyValue = line.split(":", 2);
                if (keyValue.length == 2) {
                    String key = keyValue[0].trim();
                    String value = keyValue[1].trim();
                    switch (key) {
                        case "Height":
                            heightField.setText(value);
                            break;
                        case "Weight":
                            weightField.setText(value);
                            break;
                        case "Body Temp":
                            bodyTempField.setText(value);
                            break;
                        case "Blood Pressure":
                            bloodPressureField.setText(value);
                            break;
                        case "Allergies":
                            allergiesField.setText(value);
                            break;
                        case "Health Concerns":
                            healthConcernsField.setText(value);
                            break;
                        case "Prescriptions":
                            prescriptionsField.setText(value);
                            break;
                        case "Doctor recommendations":
                            StringBuilder recommendations = new StringBuilder();
                            recommendations.append(value); // First line of recommendations
                            while (scanner.hasNextLine()) {
                                String recommendationLine = scanner.nextLine().trim(); // Trim each line
                                if (!recommendationLine.isEmpty()) {
                                    recommendations.append("\n").append(recommendationLine);
                                }
                            }
                            recommendationsArea.setText(recommendations.toString());
                            break;
                    }
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
	
	private void vitalsPage() {
		
		Label weightLabel = new Label("Weight:"), heightLabel = new Label("Height:"), bodyTempLabel = new Label("Body Temp:"),bPressureLabel = new Label("Blood Pressure:"),
		lbsLabel = new Label("lbs"), cmLabel = new Label("cm"),fahrenLabel = new Label("F°"), mmHgLabel = new Label("mmHg"), headLabel = new Label("Enter Patient Vitals:");
		
		
		HBox infoHoldBox3 = new HBox();
		
		VBox infoLabelBox3 = new VBox(), infoTextFieldBox3 = new VBox(), infoLabelBox4 = new VBox(),vitalsBottomBox = new VBox();
		
		TextField weightField = new TextField(), heightField = new TextField(),bTempField = new TextField(), bPressureField = new TextField();
		

		Button continueButton = new Button("Continue");

		headLabel.setFont(new Font("Arial",20));
		headLabel.setPadding(new Insets(0,0,10,0));
		
		infoLabelBox3.getChildren().addAll(weightLabel,heightLabel,bodyTempLabel,bPressureLabel);
		infoTextFieldBox3.getChildren().addAll(weightField,heightField,bTempField,bPressureField);
		infoLabelBox4.getChildren().addAll(lbsLabel,cmLabel,fahrenLabel,mmHgLabel);
		infoHoldBox3.getChildren().addAll(infoLabelBox3,infoTextFieldBox3,infoLabelBox4);
		vitalsBottomBox.getChildren().addAll(continueButton);
		infoLabelBox3.setSpacing(25);
		infoTextFieldBox3.setSpacing(15);
		infoLabelBox4.setSpacing(25);
		infoHoldBox3.setSpacing(10);
		vitalsBottomBox.setSpacing(15);
		vitalsBottomBox.setAlignment(Pos.CENTER);
		vitalsBottomBox.setPadding(new Insets(10,0,0,0));
		
		vitalsPane.setPadding(new Insets(10,10,10,10));
		vitalsPane.setTop(headLabel);
		vitalsPane.setLeft(infoHoldBox3);
		vitalsPane.setBottom(vitalsBottomBox);
		
		continueButton.setOnAction(e -> {
			weight = weightField.getText();
			height = heightField.getText();
			bodyTemp = bTempField.getText();
			bPressure = bPressureField.getText();
			
			weightField.clear();
			heightField.clear();
			bTempField.clear();
			bPressureField.clear();
			primaryStage.setScene(additionalInfo);
		});
	}

	private void additionalPage() {
		
		Label additionalInfoLabel = new Label("Addtional Information"), allergiesLabel = new Label("Known Allergies"), concernsLabel = new Label("Health Concerns");
		
		TextArea allergyField = new TextArea(), concernField = new TextArea();

		VBox infoLabelBox5 = new VBox(), infoTextFieldBox4 = new VBox(),bottomEnterBox = new VBox();
		
		HBox additionalInfoBox = new HBox();
		
		Button enterButton = new Button("Enter");
		
		infoLabelBox5.getChildren().addAll(allergiesLabel,concernsLabel);
		infoTextFieldBox4.getChildren().addAll(allergyField,concernField);
		additionalInfoBox.getChildren().addAll(infoLabelBox5,infoTextFieldBox4);
		bottomEnterBox.getChildren().add(enterButton);
		bottomEnterBox.setAlignment(Pos.BOTTOM_RIGHT);
		infoLabelBox5.setSpacing(75);
		infoTextFieldBox4.setSpacing(15);
		allergyField.setPrefSize(300, 75);
		concernField.setPrefSize(300, 75);
		additionalInfoLabel.setFont(new Font("Arial",20));
		additionalInfoLabel.setPadding(new Insets(0,0,10,0));
		allergiesLabel.setPadding(new Insets(25,0,0,0));
		bottomEnterBox.setPadding(new Insets(0,35,0,0));
		
		additionalPane.setTop(additionalInfoLabel);
		additionalPane.setCenter(additionalInfoBox);
		additionalPane.setBottom(bottomEnterBox);
		additionalPane.setPadding(new Insets(10,10,10,10));
		
		// get text from textAreas and store into patient file.
		enterButton.setOnAction(e -> {
		    knownAllergies = allergyField.getText();
		    healthConcerns = concernField.getText();

		    // Generate the current date in yy.MM.dd format
		    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yy.MM.dd");
		    LocalDate localDate = LocalDate.now();
		    String currentDate = dtf.format(localDate);
		    
		    // Generate the patientID
		    patientID = lastName.substring(0, Math.min(3, lastName.length())) 
		                + firstName.substring(0, Math.min(2, firstName.length())) 
		                + dateOfB.substring(0, Math.min(2, dateOfB.length()));

		    // Create the patient folder
		    File patientFolder = new File(patientID);
		    if (!patientFolder.exists()) {
		        patientFolder.mkdirs();
		    }

		    // Create the PatientVisits folder within the patient folder
		    File patientVisitsFolder = new File(patientFolder, "PatientVisits");
		    if (!patientVisitsFolder.exists()) {
		        patientVisitsFolder.mkdirs();
		    }

		    // Create the patient file within the PatientVisits folder
		    File patientFile = new File(patientVisitsFolder, patientID + "_" + currentDate + ".txt");

		    try {
		        FileWriter fw = new FileWriter(patientFile);
		        BufferedWriter bw = new BufferedWriter(fw);

		        // Write data to the file
		        bw.write("Weight: " + weight); bw.newLine();
		        bw.write("Height: " + height); bw.newLine();
		        bw.write("Body Temperature: " + bodyTemp); bw.newLine();
		        bw.write("Blood Pressure: " + bPressure); bw.newLine();
		        bw.write("Allergies: " + knownAllergies); bw.newLine();
		        bw.write("Health Concerns: " + healthConcerns); bw.newLine();
		        bw.write("Prescriptions: "); bw.newLine();
		        bw.write("Doctor recommendations: "); bw.newLine();
		        bw.close();
		    } catch (IOException e1) {
		        e1.printStackTrace();
		    }
		    primaryStage.setScene(nurseMain);    
		});
	}
	
	private void recordsPage(String fName, String lName, String concerns, String medicine, String record) {
		this.firstName = fName;
		this.lastName = lName;
		this.healthConcerns = concerns;
		this.prescribedMed = medicine;
		this.immunizationRecord = record;
		
		Button menuButton = new Button("Menu");
		
		Label recordsHeadLabel = new Label("Patient Records for: " + firstName + " " + lastName), prevHealthLabel = new Label("Previous\nHealth\nIssues:"), prevMedLabel = new Label("Previously\nPrescribed\nMedication:"),
		immunRecordLabel = new Label("Immunization\nRecord:"), prevHealthInfo = new Label(healthConcerns), prevMedInfo = new Label(prescribedMed), immunRecordInfo = new Label(immunizationRecord);

		VBox infoLabelBox6 = new VBox(),infoTextBox = new VBox(), bottomMenuBox = new VBox(),prevHealthBox = new VBox(), prevMedBox = new VBox(), immunRecordBox = new VBox();
		
		HBox recordsBox = new HBox();
		
		recordsHeadLabel.setFont(new Font("Arial",20));
		recordsHeadLabel.setPadding(new Insets(0,0,10,0));
		prevHealthLabel.setWrapText(true);
		prevMedLabel.setWrapText(true);
		immunRecordLabel.setWrapText(true);
		prevHealthInfo.setWrapText(true);
		prevMedInfo.setWrapText(true);
		immunRecordInfo.setWrapText(true);
		prevHealthBox.setStyle("-fx-border-color: black");
		prevMedBox.setStyle("-fx-border-color: black");
		immunRecordBox.setStyle("-fx-border-color: black");
		infoLabelBox6.getChildren().addAll(prevHealthLabel,prevMedLabel,immunRecordLabel);
		infoTextBox.getChildren().addAll(prevHealthBox,prevMedBox,immunRecordBox);
		bottomMenuBox.getChildren().add(menuButton);
		bottomMenuBox.setAlignment(Pos.BOTTOM_RIGHT);
		bottomMenuBox.setPadding(new Insets(0,30,0,0));
		infoLabelBox6.setSpacing(30);
		infoTextBox.setSpacing(30);
		recordsBox.getChildren().addAll(infoLabelBox6,infoTextBox);
		prevHealthBox.setPrefSize(300, 60);
		prevMedBox.setPrefSize(300, 60);
		immunRecordBox.setPrefSize(300, 60);
		prevHealthBox.getChildren().add(prevHealthInfo);
		prevMedBox.getChildren().add(prevMedInfo);
		immunRecordBox.getChildren().add(immunRecordInfo);
		
		recordsPane.setPadding(new Insets(10,10,10,10));
		recordsPane.setTop(recordsHeadLabel);
		recordsPane.setCenter(recordsBox);
		recordsPane.setBottom(bottomMenuBox);
		
		
		menuButton.setOnAction(e -> {
			prevHealthBox.getChildren().clear();
			prevMedBox.getChildren().clear();
			immunRecordBox.getChildren().clear();
			primaryStage.setScene(nurseMain);
		});
	}
	
	/*private void messagePrePage() {
		Button send = new Button("Send Message"), home = new Button("Return Home");
		TextArea sender = new TextArea(), re = new TextArea(), message = new TextArea(); 
        ListView<String> messagesListView = new ListView<>(); // ListView for displaying visits
        String messagePath; 
        File messageFile; 
        
        preMessagePane.getChildren().clear();
        // Read the directory and list available records
        messagePath = "Nurse/RecievedMessages/Nurse_msg0000.txt";
        
        while(messagePath.exists()) {
        	
        }
        

        VBox messageList = new VBox(5); 
        messageList.getChildren().addAll(messagesListView);

        Button viewMessageButton = new Button("View Message");
        
        HBox buttonBox = new HBox(10, viewMessageButton, back);
        buttonBox.setAlignment(Pos.CENTER);

        VBox mainLayout = new VBox(20, messageList, buttonBox);
        mainLayout.setAlignment(Pos.CENTER);

        preMessagePane.getChildren().add(mainLayout);
        
        viewMessageButton.setOnAction(e -> {
            String selectedRecordName = messagesListView.getSelectionModel().getSelectedItem();
            if (selectedRecordName != null && !selectedRecordName.isEmpty()) {
                String fullPath = recordPath + "/" + selectedRecordName + ".txt";
                try {
                    String fileContent = new String(Files.readAllBytes(Paths.get(fullPath)));
                    //updateUIWithRecord(fileContent);
                } catch (IOException ex) {
                    System.out.print("Failed to read record: " + ex.getMessage());
                }
            }
        });

        back.setOnAction(e -> primaryStage.setScene(nurseMain));
		
		send.setOnAction(new EventHandler<>() { 
			public void handle(ActionEvent event) {
				
			}
		});
	}*/
}


public class patientUser extends CSE360_Main{
	//setting up global variables
		




	
	public String userName; //holds unique user ID for current user
	HBox mainPane = new HBox();
	VBox loginBox = new VBox(8),centerBox = new VBox(20);
	
	private  TextArea doctorRecommendationsArea;	
	private TextField firstNameField, lastNameField, emailField,
						phoneNumberField, birthdayField, 
						insuranceField, pharmacyField, heightField, 
						weightField, bodyTempField, bloodPressureField,
						allergyField,healthConcernsField, prescriptionField,
						passwordField, examDate;
	
Button
	showRecords = new Button("View Records"),
	updateInfo = new Button("Update Contact Information"),
	message = new Button("Messages"),
	logout = new Button("Logout"),
	login = new Button("Login"),
	apply = new Button("Apply Changes"),
	cancel = new Button("Cancel");
	
	Label header = new Label("Welcome to Patient Portal");
	Label patientHeader = new Label("Welcome, "+userName);
	

	  public patientUser(Stage primaryStage) {
	       super(); 
	       this.primaryStage = primaryStage;
	       
	       buildLoginPatient();
	    }

    //---- MAIN PAGE OPTIONS [CREATE ACCOUNT/EXISTING LOGIN] -----//

/* NAME     : buildLogin()
*  PURPOSE  : This function shows the patient an option to either
* 			  create an account or login to an existing account
* 
* 	{ comes from selecting patient view from main page }*/
private void buildLoginPatient() {
	
	 if (this.primaryStage == null) {
         throw new IllegalStateException("Primary stage has not been initialized.");
     }

	 primaryStage.setWidth(800);
	 primaryStage.setHeight(600); 
	Label welcomeLabel = new Label("Welcome to the Patient Portal");
	
	Button  //set up our buttons
		existingUserLogin = new Button("Existing Patient"),
		createAccount = new Button("Create Account");
 	

 	
 	 examDate = new TextField();
 	 heightField = new TextField();
 	 weightField = new TextField();
 	 bodyTempField = new TextField();
 	 bloodPressureField = new TextField();
 	 allergyField = new TextField();
 	 healthConcernsField = new TextField();
 	 prescriptionField = new TextField();
 	 doctorRecommendationsArea = new TextArea();
 	  
 	 firstNameField = new TextField();
 	 lastNameField = new TextField();
 	 emailField = new TextField();
 	 birthdayField = new TextField();
 	 phoneNumberField = new TextField();
 	 insuranceField = new TextField();
 	 pharmacyField = new TextField();
 	 passwordField = new TextField();
	
	
 
 	centerBox.getChildren().clear();
 	centerBox.setAlignment(Pos.CENTER);
 	centerBox.getChildren().addAll(welcomeLabel,createAccount,existingUserLogin,logout);
 	
 	
  if (primaryStage.getScene() == null) { 
	        Scene scene = new Scene(centerBox, 500, 250);
	        primaryStage.setScene(scene);
	    } else { 
	        primaryStage.getScene().setRoot(centerBox);
	    }

	logout.setOnAction(e -> {
		buildLogin();
		primaryStage.setScene(new Scene(mainPane,500,250));
		primaryStage.show();
	});
	
	createAccount.setOnAction(e-> patientInfoForm());
 	existingUserLogin.setOnAction(e-> setupUserLogin());
	primaryStage.show();	
}

/* NAME    : patientInfoForm()
 * PURPOSE : This function takes in new user information and 
 * 			saves it to a file with their new unique patientID
 * 		    (last name + first name + birthday). All fields must
 * 			be entered or it will not allow the user to continue.
 * 			
 * 				{ comes from clicking create account }*/
private void patientInfoForm() {
    centerBox.getChildren().clear();
    clearPatientInfoFields();
    centerBox.setPadding(new Insets(20));

    // Title
    Label formTitle = new Label("New Patient Information");
    formTitle.setFont(new Font("Arial", 24));
    formTitle.setAlignment(Pos.CENTER); // Align the title
    formTitle.setMaxWidth(Double.MAX_VALUE); // Ensure it spans the container width

    // Adding the title at the top
    centerBox.getChildren().add(formTitle);

    // Fields
    centerBox.getChildren().addAll(
        createFieldBox("First Name: ", firstNameField),
        createFieldBox("Last Name: ", lastNameField),
        createFieldBox("Email: ", emailField),
        createFieldBox("Date of Birth (MM/DD/YR): ", birthdayField),
        createFieldBox("Phone Number: ", phoneNumberField),
        createFieldBox("Insurance ID: ", insuranceField),
        createFieldBox("Pharmacy Address: ", pharmacyField),
        createFieldBox("Create Password:  ", passwordField));

    // Button Box
    HBox buttonBox = new HBox(10); 
    buttonBox.setAlignment(Pos.CENTER); 

    apply.setOnAction(e -> savePatientInfoToFile());
    cancel.setOnAction(e -> buildLoginPatient());

    buttonBox.getChildren().addAll(apply, cancel);
    centerBox.getChildren().add(buttonBox);
    centerBox.setAlignment(Pos.CENTER); 
}

/* NAME    : setupUserLogin()
 * PURPOSE : this function allows the patient to enter their ID
 * 			 and will allow access to their account if the login 
 * 			 is able to be validated. If it cannot be validated,
 * 			 it will produce an error message saying so and allow
 * 			 the user to try again. The user can also cancel and 
 * 			 go back to the general patient view. 
 * 			{ comes from clicking existing user login }*/
private void setupUserLogin() {
    centerBox.getChildren().clear();
    centerBox.setPadding(new Insets(20));
    centerBox.setAlignment(Pos.CENTER);

    Label label1 = new Label("Please enter your Patient ID:");
    TextField userIdField = new TextField();
    HBox userIdFieldBox = new HBox(userIdField);
    userIdFieldBox.setAlignment(Pos.CENTER);
    userIdField.setPrefWidth(100);
    userIdField.setMaxWidth(100); 

    Label label22 = new Label("Please enter your password:");
    PasswordField passwordField = new PasswordField();
    HBox passwordFieldBox = new HBox(passwordField);
    passwordFieldBox.setAlignment(Pos.CENTER);
    passwordField.setPrefWidth(100);
    passwordField.setMaxWidth(100);

  
    Button cancel = new Button("Cancel");
    cancel.setOnAction(e -> buildLoginPatient());
    Button login = new Button("Login");
    login.setOnAction(e -> loginValidation(userIdField.getText(), passwordField.getText()));
    HBox buttonBox = new HBox(10, login, cancel);
    buttonBox.setAlignment(Pos.CENTER);

    centerBox.getChildren().addAll(label1, userIdFieldBox, label22, passwordFieldBox, buttonBox);
}


	//------- PATIENT LOGGED IN [SHOW RECORDS/ UPDATE INFO / MESSAGE ] ------ //    

/* NAME     : buildPatientOptions()
 * PURPOSE  : This function shows the patient all the options
 * 			  they can enjoy inside their personal account
 * 	{ comes from an account creation or from a successful existing login }*/
private void buildPatientOptions() {
	centerBox.getChildren().clear();	
	showRecords.setOnAction(e-> showPatientRecords());
	updateInfo.setOnAction(e-> updatePatientInfo());
	logout.setOnAction(e->buildLoginPatient());
	
	centerBox.getChildren().clear();
	centerBox.setAlignment(Pos.CENTER);
	centerBox.getChildren().addAll(showRecords,updateInfo,message,logout);
	
	
}

/* NAME     : showPatientRecords()
 * PURPOSE  : This function allows the user to see their recorded exam 
 * 			  information and a summary of their last visit. If there is
 * 			  previous records recorded for the patient, we will be shown an 
 * 			  error message and be re-directed back to the patient options.
 * 			  Patient can click cancel and go back to the patient options
 * 			  or click View Previous visit to see their last visit. If there
 * 			  were no previous visits, they will be shown an error message.
 *				{ comes clicking show records } */
private void showPatientRecords() {
    centerBox.getChildren().clear();

    String recordPath = BASE_DIRECTORY + File.separator + "Patients" + File.separator + userName + File.separator + "PatientRecords";


    doctorRecommendationsArea.setPrefSize(200, 400);

    heightField.setEditable(false);
    weightField.setEditable(false);
    bodyTempField.setEditable(false);
    bloodPressureField.setEditable(false);
    allergyField.setEditable(false);
    healthConcernsField.setEditable(false);
    prescriptionField.setEditable(false);
    doctorRecommendationsArea.setEditable(false);

    // Layout for the records section
    VBox recordsBox = new VBox(10,
        createFieldBox("Height:", heightField),
        createFieldBox("Weight:", weightField),
        createFieldBox("Body Temp:", bodyTempField),
        createFieldBox("Blood Pressure:", bloodPressureField),
        createFieldBox("Allergies:", allergyField),
        createFieldBox("Health Concerns:", healthConcernsField),
        createFieldBox("Prescriptions:", prescriptionField)
    );

    // Layout for doctor recommendations
    VBox recommendationsBox = new VBox(10,
        new Label("Doctor recommendations:"),
        doctorRecommendationsArea
    );

    Label headerLabel = new Label("Previous Visits: yy.mm.dd");

    // ListView for displaying visits
    ListView<String> visitsListView = new ListView<>();
    // Read the directory and list available records
    File recordsDir = new File(recordPath);
    File[] recordsFiles = recordsDir.listFiles();
    if (recordsFiles != null) {
        for (File file : recordsFiles) {
            String fileName = file.getName();
            visitsListView.getItems().add(fileName.substring(0, fileName.lastIndexOf('.')));
        }
    }
    
    VBox visitsListWithHeader = new VBox(5); 
    visitsListWithHeader.getChildren().addAll(headerLabel, visitsListView);

    Button viewVisitButton = new Button("View Visit");
    Button goBackButton = new Button("Go Back");

    viewVisitButton.setOnAction(e -> {
        String selectedRecordName = visitsListView.getSelectionModel().getSelectedItem();
        if (selectedRecordName != null && !selectedRecordName.isEmpty()) {
            String fullPath = recordPath + "/" + selectedRecordName + ".txt";
            try {
                String fileContent = new String(Files.readAllBytes(Paths.get(fullPath)));
                updateUIWithRecord(fileContent);
            } catch (IOException ex) {
                showErrorDialog("Failed to read record: " + ex.getMessage());
            }
        }
    });

    goBackButton.setOnAction(e -> buildPatientOptions());

    HBox buttonBox = new HBox(10, viewVisitButton, goBackButton);
    buttonBox.setAlignment(Pos.CENTER);

    HBox mainContentBox = new HBox(20,
        recordsBox,
        recommendationsBox,
        visitsListWithHeader 
    );

    VBox mainLayout = new VBox(20, mainContentBox, buttonBox);
    mainLayout.setAlignment(Pos.CENTER);

    centerBox.getChildren().add(mainLayout);

}

 /* NAME     : updatePatientInfo()
 * PURPOSE  : This function brings up a page showing the patient's current
 * 			  information and allows them to update their phone number and 
 * 			  email address. The fields must be filled out if deleted or the 
 * 			  user will be shown an error message and not allowed to continue.
 * 			  The user can click apply to save changes and will be sent back to
 * 			  their options or they can click cancel and go back to their options. 
 * 						{ comes clicking update contact information }*/
private void updatePatientInfo() {
    centerBox.getChildren().clear();


    Label greetingLabel = new Label("Hello " + userName); 
    greetingLabel.setFont(new Font("Arial", 16));

    String fileContent = null;
    String userDirectoryPath = BASE_DIRECTORY + File.separator + "Patients" + File.separator + userName;


    try {
        fileContent = readFromUserFile(userName, userDirectoryPath); 
    } catch (IOException e) {
        showErrorDialog(e.getMessage());
        buildLoginPatient();
        return; 
    }

    String[] contentLines = fileContent.split(System.lineSeparator());
    if (contentLines.length >= 8) { 
        passwordField.setText(contentLines[0].split(": ")[1]);
        firstNameField.setText(contentLines[1].split(": ")[1]);
        lastNameField.setText(contentLines[2].split(": ")[1]);
        emailField.setText(contentLines[3].split(": ")[1]);
        birthdayField.setText(contentLines[4].split(": ")[1]);
        phoneNumberField.setText(contentLines[5].split(": ")[1]);
        insuranceField.setText(contentLines[6].split(": ")[1]);
        pharmacyField.setText(contentLines[7].split(": ")[1]);
    }

    passwordField.setEditable(false); 
    firstNameField.setEditable(false);
    lastNameField.setEditable(false);
    birthdayField.setEditable(false);

    centerBox.getChildren().addAll(
        greetingLabel,
        createFieldBox("First Name: ", firstNameField),
        createFieldBox("Last Name: ", lastNameField),
        createFieldBox("Email: ", emailField),
        createFieldBox("Date of Birth (MM/DD/YR): ", birthdayField),
        createFieldBox("Phone Number: ", phoneNumberField),
        createFieldBox("Insurance ID: ", insuranceField),
        createFieldBox("Pharmacy Address: ", pharmacyField),
        new HBox(apply), new HBox(cancel)
    );

    apply.setOnAction(e -> updateUserInfo());
    cancel.setOnAction(e -> buildPatientOptions());

    
}

// --------------- FUNCTIONALITY FUNCTIONS -----------------------//

/* NAME    : loginValidation()
 * INPUT   : username and password
 * OUTPUT  : allow user access or error message
 * PURPOSE : this is used for the login button action. This function
 * 			 takes a patient ID and makes sure that it is valid 
 * 			{ validating login }*/
private void loginValidation(String enteredUserName, String enteredPassword) {
    try {
        // try to construct the path to the user's directory
    	String userDirectoryPath = BASE_DIRECTORY + File.separator + "Patients" + File.separator + enteredUserName;


        String fileContent = readFromUserFile(enteredUserName, userDirectoryPath);
        
        // password line is formatted as "Password: actual_password" 
        String[] contentLines = fileContent.split(System.lineSeparator());
        String storedPassword = "";
        for (String line : contentLines) {
            if (line.startsWith("Password: ")) {
                storedPassword = line.split(": ")[1].trim();
                break; 
            }
        }
        
        if (enteredPassword.equals(storedPassword)) {
            userName = enteredUserName; 
            buildPatientOptions(); 
        } else {
            showErrorDialog("Invalid username or password.");
        }
    } catch (IOException e) {
        showErrorDialog("An error occurred: " + e.getMessage());
    }
}

/* NAME    : updateUIWithRecords()
 * PURPOSE : This function is used with showPatientRecords(). It parses the 
 * 			 text file which stores the patient's exam data and then displays
 * 			 it in the appropriate fields.
 * 			{ updates which record to view } */
private void updateUIWithRecord(String fileContent) {
    String[] contentLines = fileContent.split(System.lineSeparator());
    
    // create variables to hold the parsed data
    String date = "", height = "", weight = "", bodyTemp = "", bloodPressure = "", allergies = "", healthConcerns = "", prescriptions = "";
    StringBuilder doctorRecs = new StringBuilder();
    boolean recsStarted = false; // Flag to track when doctor recommendations start
    
    for (String line : contentLines) {
        if (recsStarted) {
            // Append the line to doctor recommendations, including line breaks for readability
            doctorRecs.append(line).append(System.lineSeparator());
            continue;
        }

        // Splitting each line by the first occurrence of ": "
        // *** if we want the data header in the file to change
        // 	   we must update it here in this case statement for correct parsing
        String[] parts = line.split(": ", 2);
        if (parts.length == 2) {
            switch (parts[0]) {
                case "Date":
                    date = parts[1];
                    break;
                case "Height":
                    height = parts[1];
                    break;
                case "Weight":
                    weight = parts[1];
                    break;
                case "Body Temp":
                    bodyTemp = parts[1];
                    break;
                case "Blood Pressure":
                    bloodPressure = parts[1];
                    break;
                case "Allergies":
                    allergies = parts[1];
                    break;
                case "HealthConcerns":
                    healthConcerns = parts[1];
                    break;
                case "Prescriptions":
                    prescriptions = parts[1];
                    break;
                case "Doctor recommendations": // Marks the beginning of doctor recommendations
                    recsStarted = true;
                    doctorRecs.append(parts[1]).append(System.lineSeparator());
                    break;
            }
        }
    }

    // Update UI with the parsed data
    examDate.setText(date);
    heightField.setText(height);
    weightField.setText(weight);
    bodyTempField.setText(bodyTemp);
    bloodPressureField.setText(bloodPressure);
    allergyField.setText(allergies);
    healthConcernsField.setText(healthConcerns);
    prescriptionField.setText(prescriptions);
    doctorRecommendationsArea.setText(doctorRecs.toString()); 
}

/* NAME     : savePatientInfoToFile()
 * PURPOSE  : This function makes sure all fields were filled out
 * 			  and creates a new directory for each patient */ 
private void savePatientInfoToFile() {
    userName = generateUserName();

    if (!areFieldsFilledNewUser()) {
        showErrorDialog("All fields must be filled out before saving.");
        return;
    }

    String patientDirectoryPath = BASE_DIRECTORY + File.separator + "Patients" + File.separator + userName;
    createPatientDirectories(patientDirectoryPath);

    String patientInfoFilePath = patientDirectoryPath + "/" + userName + "_patientInfo.txt";
    savePatientDataToFile(patientInfoFilePath);

    buildLoginPatient();
}

/* NAME     : savePatientDataToFile()
 * INPUT    : file path to save to 
 * PURPOSE  : This function writes the given information
 * 			  to a text file in the appropriate format */
private void savePatientDataToFile(String filePath) {
    String content = String.format(
        "Password: %s%nFirst Name: %s%nLast Name: %s%nEmail: %s%nBirthday: %s%nPhone Number: %s%nInsurance ID: %s%nPharmacy Address: %s%n",
        passwordField.getText(),
        firstNameField.getText(),
        lastNameField.getText(),
        emailField.getText(),
        birthdayField.getText(),
        phoneNumberField.getText(),
        insuranceField.getText(),
        pharmacyField.getText()
    );

    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
        writer.write(content);
        System.out.println("Information saved to " + filePath);
    } catch (IOException ex) {
        showErrorDialog("Failed to save patient information: " + ex.getMessage());
    }
}

/* NAME     : updateUserInfo()
 * PURPOSE  : This function is used when a patient updates their 
 * 			  contact information.
 *  { used in updating contact information }*/
private void updateUserInfo() {
if (userName == null || userName.trim().isEmpty()) {
  showErrorDialog("User name is not set. Cannot save the information.");
  return;
}

String directoryPath = BASE_DIRECTORY + File.separator + "Patients" + File.separator + userName;

//check if directory exists
File patientDirectory = new File(directoryPath);
if (!patientDirectory.exists()) {
  showErrorDialog("Patient directory does not exist. Cannot update the information.");
  return;
}

// file path for the patient's info file
String filePath = directoryPath + "/" + userName + "_patientInfo.txt";

// Content to be written (updated with current field values)
String content = String.format(
  "Password: %s%nFirst Name: %s%nLast Name: %s%nEmail: %s%nBirthday: %s%nPhone Number: %s%nInsurance ID: %s%nPharmacy Address: %s%n",
  passwordField.getText(),
  firstNameField.getText(),
  lastNameField.getText(),
  emailField.getText(),
  birthdayField.getText(),
  phoneNumberField.getText(),
  insuranceField.getText(),
  pharmacyField.getText()
);

// Write (or overwrite) the content
try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
  writer.write(content);
  System.out.println("Information saved or updated in " + filePath);
} catch (IOException ex) {
  ex.printStackTrace();
  showErrorDialog("Failed to update information: " + ex.getMessage());
}

buildPatientOptions();
}  

/* NAME     : readFromUserFile()
 * INPUT    : a Patient ID and a directory path
 * PURPOSE  : This function reads information from a particular file name. 
 * 			  The file name must match the uniqueID to be read. For example,
 * 			  a user file may be named melKar95_patientFile.txt so the uniqueId
 * 			  must be melKar95 to access it. If there is no matching ID, it will
 * 			  throw an exception saying so. */ 

private String readFromUserFile(String uniqueId, String directoryPath) throws IOException {
    File dir = new File(directoryPath);
    String content = "";

    // Filter the list of files in the directory based on the uniqueId
    File[] matchingFiles = dir.listFiles((dir1, name) -> name.startsWith(uniqueId) && name.endsWith(".txt"));

    if (matchingFiles == null || matchingFiles.length == 0) {
        // Throw an IOException if no matching file is found
        throw new IOException("No file found starting with the unique ID: " + uniqueId);
    } else {
        // Assuming there's only one match or you're only interested in the first match
        content = readFromFile(matchingFiles[0].getPath());
    }

    return content;
}

/* NAME     : readFromFile()
 * INPUT    : a file path 
 * OUTPUT   : a String of file content
 * PURPOSE  : This function gives us the functionality to read from a text file
 * 			  from the given file path	*/  
private String readFromFile(String filePath) {
    StringBuilder contentBuilder = new StringBuilder();
    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
        String line;
        while ((line = reader.readLine()) != null) {
            contentBuilder.append(line).append(System.lineSeparator());
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    return contentBuilder.toString();
}
    
/* NAME     : showErrorDialog()
 * INPUT    : an error message String
 * PURPOSE  : This function takes in an error message and displays it 
 * 			  when the condition for an error occurs	*/ 
private void showErrorDialog(String message) {
    Alert alert = new Alert(AlertType.ERROR);
    alert.setTitle("Error");
    alert.setHeaderText(null);
    alert.setContentText(message);
    alert.showAndWait();
}

/* NAME     : areFieldsFilledNewUser()
 * OUTPUT   : returns true if all fields are filled, false if not
 * PURPOSE  : This function just checks and makes sure all text fields in
 * 			  the new patient information form are filled. 		  */
private boolean areFieldsFilledNewUser() {
    if (firstNameField.getText().trim().isEmpty() ||
    	lastNameField.getText().trim().isEmpty() ||
    	emailField.getText().trim().isEmpty() ||
    	birthdayField.getText().trim().isEmpty() ||
    	phoneNumberField.getText().trim().isEmpty() ||
    	insuranceField.getText().trim().isEmpty() ||
    	pharmacyField.getText().trim().isEmpty()||
    	passwordField.getText().trim().isEmpty()) {
        
        return false;
    }
    return true;
}

/* NAME     : resetLoginUI()
 * PURPOSE  : resets UI               */ 
//private void resetLoginUI() {
  //      loginBox.getChildren().clear();
    //    centerBox.getChildren().clear();
    //}

//private void setupMainUI() {
   //  header.setFont(new Font("Arial", 16));
    // centerBox.setAlignment(Pos.CENTER);
    // centerBox.getChildren().addAll(header, loginBox);
    // mainPane.setAlignment(Pos.CENTER);
    // mainPane.getChildren().add(centerBox);
 //}
 
/* NAME     : createFieldBox()
 * INPUT    : a string and a TextField 
 * OUTPUT   : HBox called fieldBox
 * PURPOSE  : This function just conveniently puts a label
 * 			  on a text field to keep them organized and easy
 * 			  to align on the page. */  
private HBox createFieldBox(String labelText, TextField textField) {
    Label label = new Label(labelText);
    HBox fieldBox = new HBox(10, label, textField);
    fieldBox.setAlignment(Pos.CENTER_LEFT);
    //textField.setMaxWidth(Double.MAX_VALUE);
    textField.setPrefWidth(200);
    //HBox.setHgrow(textField, Priority.ALWAYS);

    return fieldBox;
 } 

/* NAME     : generateUserName()
 * OUTPUT   : uniqueID or null
 * PURPOSE  : This generates a unique user ID */  
private String generateUserName() {
if (!lastNameField.getText().trim().isEmpty() && !firstNameField.getText().trim().isEmpty()) {
	  String partOfLastName = lastNameField.getText().trim().length() >= 3 ? lastNameField.getText().trim().substring(0, 3) : lastNameField.getText().trim();
	  String partOfFirstName = firstNameField.getText().trim().length() >= 2 ? firstNameField.getText().trim().substring(0, 2) : firstNameField.getText().trim();
	  String partOfBirthday = birthdayField.getText().trim().length() >= 2 ? birthdayField.getText().trim().substring(0,2): birthdayField.getText().trim();

	  return userName = partOfLastName + partOfFirstName + partOfBirthday;
	} 
return null;
}

/* NAME     : createPatientDirectories()
 * INPUT    : base path for the main folder
 * PURPOSE  : This function builds the organization of files for Patient accounts */  
private void createPatientDirectories(String basePath) {
    File patientDirectory = new File(basePath);
    if (!patientDirectory.exists() && !patientDirectory.mkdirs()) {
        showErrorDialog("Failed to create directory for patient.");
        return;
    }
    
    new File(basePath + File.separator + "sentMessages").mkdirs();
    new File(basePath + File.separator + "receivedMessages").mkdirs();
    new File(basePath + File.separator + "PatientRecords").mkdirs();
}


/* NAME    : clearPatientInfoFields()
 * PURPOSE : resets text fields for new users */
private void clearPatientInfoFields() {
    firstNameField.setText("");
    lastNameField.setText("");
    emailField.setText("");
    birthdayField.setText("");
    phoneNumberField.setText("");
    insuranceField.setText("");
    pharmacyField.setText("");
    passwordField.setText("");

    firstNameField.setEditable(true);
    lastNameField.setEditable(true);
    emailField.setEditable(true);
    birthdayField.setEditable(true);
    phoneNumberField.setEditable(true);
    insuranceField.setEditable(true);
    pharmacyField.setEditable(true);
    passwordField.setEditable(true);

 }

}

}
